<?php

namespace Tvthu\ImportRewrite\Console;

use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;

use Magento\Framework\App\State;
use Magento\Framework\Filesystem\DirectoryList;
use Magento\Framework\Filesystem\File\ReadFactory;
use Magento\Framework\Exception\LocalizedException;

use Magento\Framework\App\ResourceConnection;

class Import extends Command
{

    const CSV_FILE_PATH = 'url_rewrite.csv';

    protected $appState;
    protected $directoryList;
    protected $readFactory;

    protected $resourceConnection;
    protected $logger;

    private $csvData;
    private $storeID;

    public function __construct(
        State $appState,
        DirectoryList $directoryList,
        ReadFactory $readFactory,
        ResourceConnection $resourceConnection,
        \Tvthu\ImportRewrite\Logger\Logger $logger,
        string $name = null
    ) {
        parent::__construct($name);
        $this->appState = $appState;
        $this->directoryList = $directoryList;
        $this->readFactory = $readFactory;

        $this->resourceConnection = $resourceConnection;
        $this->logger = $logger;

        $this->storeID = 1;
    }

    /**
     * @inheritDoc
     */
    protected function configure()
    {
        $this->setName('admin:import_301_url_rewrite');
        $this->setDescription('Import URL Rewrites');

        parent::configure();
    }

    /**
     * @param InputInterface $input
     * @param OutputInterface $output
     *
     * @return null|int
     */
    protected function execute(InputInterface $input, OutputInterface $output)
    {
        $result = $this->checkExitsRequestPaths();
        if ($result) {
            // next step
            $output->writeln('<error>Have ' . sizeof($result) . ' duplicate request paths, process import. </error>');
            $this->logger->info('Duplicate request paths:');
            $this->logger->info(json_encode($result, JSON_PRETTY_PRINT));
        } else {
            // don't duplicate, next step
            $output->writeln('<info>Don\'t duplicate, process import.</info>');
        }

        $this->importRewriteUrl($output);
    }

    private function checkExitsRequestPaths()
    {
        $requests = $this->getCSVFile();
        if (empty($requests)) {
            return false;
        }

        // $inputRequestPath = [];
        foreach ($requests as $request) {
            if (isset($request['request_path'])) {
                $inputRequestPath[] = $request['request_path'];
            }
        }

        $connection = $this->resourceConnection->getConnection();
        $tableRewrite = $connection->getTableName('url_rewrite');
        $query = "SELECT * FROM $tableRewrite WHERE store_id = 1 AND request_path IN ('" . implode("','", $inputRequestPath) . "')";

        $result = $connection->fetchAll($query);

        // check exits $result
        if (count($result) > 0) {
            return $result;
        } else {
            return false;
        }
    }

    protected function importRewriteUrl(OutputInterface $output){
        $requests = $this->getCSVFile();
        if (empty($requests)) {
            return false;
        }

        $insertDatas = [];

        foreach($requests as $row){
            $insertDatas[] = [$row['request_path'],$row['target_path'], $row['redirect_type'], $row['store_code']];
        }

        $connection = $this->resourceConnection->getConnection();
        $tableRewrite = $connection->getTableName('url_rewrite');


        $connection->beginTransaction();

        try{
            $query = "INSERT INTO $tableRewrite (request_path, target_path, redirect_type, store_id) VALUES (?, ?, ?, ?) ON DUPLICATE KEY UPDATE target_path = VALUES(target_path), redirect_type = VALUES(redirect_type), is_autogenerated = 0";

            foreach($insertDatas as $data){
                $connection->query($query, $data);
            }

            $connection->commit();
        }catch(LocalizedException $e){
            $connection->rollBack();

            throw $e;
        }catch(\Exception $e){
            $connection->rollBack();
            $output->writeln(_('An error occurred while executing the query: %1', $e->getMessage()));
        }
    }

    private function getCSVFile()
    {
        if (!isset($this->csvData)) {
            // Load the CSV file
            $filePath = $this->directoryList->getPath(\Magento\Framework\App\Filesystem\DirectoryList::MEDIA) . '/' . 'import' . '/' . self::CSV_FILE_PATH;

            if (!file_exists($filePath)) {
                throw new LocalizedException(__('File not found: %1', $filePath));
            }

            $file = $this->readFactory->create($filePath, 'r');

            $headers = [];
            $bundleProducts = [];

            while ($csvLine = $file->readCsv()) {
                if (empty($headers)) {
                    $headers = $csvLine;
                } else {
                    $bundleProducts[] = array_combine($headers, $csvLine);
                }
            }

            $file->close();

            $this->csvData = $bundleProducts;
        }

        return $this->csvData;
    }
}
